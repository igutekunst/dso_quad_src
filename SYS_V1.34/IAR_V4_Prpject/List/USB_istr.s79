//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   12/Apr/2011  14:55:41 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  thumb                                               /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\Design\DS203\SFW\SYS_V1.34\source\USB_istr.c     /
//    Command line    =  D:\Design\DS203\SFW\SYS_V1.34\source\USB_istr.c     /
//                       -lA D:\Design\DS203\SFW\SYS_V1.34\IAR_V4_Prpject\Li /
//                       st\ -o D:\Design\DS203\SFW\SYS_V1.34\IAR_V4_Prpject /
//                       \Obj\ -s9 --no_inline --cpu_mode thumb --endian     /
//                       little --cpu cortex-M3 --stack_align 4 -e --fpu     /
//                       None --dlib_config "C:\Program Files\IAR            /
//                       Systems\Embedded Workbench 4.0                      /
//                       Evaluation\arm\LIB\dl7mptnnl8n.h" -I                /
//                       D:\Design\DS203\SFW\SYS_V1.34\IAR_V4_Prpject\..\..\ /
//                       FWLib\inc\ -I D:\Design\DS203\SFW\SYS_V1.34\IAR_V4_ /
//                       Prpject\..\..\USBLib\inc\ -I                        /
//                       D:\Design\DS203\SFW\SYS_V1.34\IAR_V4_Prpject\..\inc /
//                       lude\ -I "C:\Program Files\IAR Systems\Embedded     /
//                       Workbench 4.0 Evaluation\arm\INC\"                  /
//    List file       =  D:\Design\DS203\SFW\SYS_V1.34\IAR_V4_Prpject\List\U /
//                       SB_istr.s79                                         /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME USB_istr

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__thumb"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
        MULTWEAK ??CTR_LP??rT
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC USB_Istr
        FUNCTION USB_Istr,0203H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC bIntPackSOF
        PUBLIC pEpInt_IN
        PUBLIC pEpInt_OUT
        PUBLIC wIstr
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, R13:32, R14:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI R14 Undefined
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
CTR_LP              SYMBOL "CTR_LP"
??CTR_LP??rT        SYMBOL "??rT", CTR_LP

        EXTERN CTR_LP
        FUNCTION CTR_LP,0202H
        EXTERN Device_Property
        EXTERN EP1_IN_Callback
        FUNCTION EP1_IN_Callback,0602H
        EXTERN EP2_OUT_Callback
        FUNCTION EP2_OUT_Callback,0602H
        EXTERN NOP_Process
        FUNCTION NOP_Process,0602H
        EXTERN wInterrupt_Mask

// D:\Design\DS203\SFW\SYS_V1.34\source\USB_istr.c
//    1 /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
//    2 * File Name          : usb_istr.c
//    3 * Author             : MCD Application Team
//    4 * Version            : V2.2.1
//    5 * Date               : 09/22/2008
//    6 * Description        : ISTR events interrupt service routines
//    7 ********************************************************************************
//    8 * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
//    9 * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
//   10 * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
//   11 * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
//   12 * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
//   13 * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
//   14 *******************************************************************************/
//   15 
//   16 /* Includes ------------------------------------------------------------------*/
//   17 #include "USB_type.h"
//   18 #include "USB_regs.h"
//   19 #include "USB_pwr.h"
//   20 #include "USB_istr.h"
//   21 #include "USB_init.h"
//   22 #include "USB_int.h"
//   23 
//   24 /* Private typedef -----------------------------------------------------------*/
//   25 /* Private define ------------------------------------------------------------*/
//   26 /* Private macro -------------------------------------------------------------*/
//   27 /* Private variables ---------------------------------------------------------*/

        RSEG DATA_Z:DATA:SORT:NOROOT(1)
//   28 volatile u16 wIstr;  /* ISTR register last read value */
wIstr:
        DS8 2

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
//   29 volatile u8 bIntPackSOF = 0;  /* SOFs received between 2 consecutive packets */
bIntPackSOF:
        DS8 1
//   30 
//   31 /* Extern variables ----------------------------------------------------------*/
//   32 /* Private function prototypes -----------------------------------------------*/
//   33 /* Private functions ---------------------------------------------------------*/
//   34 /* function pointers to non-control endpoints service routines */

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//   35 void (*pEpInt_IN[7])(void) =
pEpInt_IN:
        DS8 28
        REQUIRE `?<Initializer for pEpInt_IN>`
//   36   {
//   37     EP1_IN_Callback,
//   38     EP2_IN_Callback,
//   39     EP3_IN_Callback,
//   40     EP4_IN_Callback,
//   41     EP5_IN_Callback,
//   42     EP6_IN_Callback,
//   43     EP7_IN_Callback,
//   44   };
//   45 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//   46 void (*pEpInt_OUT[7])(void) =
pEpInt_OUT:
        DS8 28
        REQUIRE `?<Initializer for pEpInt_OUT>`
//   47   {
//   48     EP1_OUT_Callback,
//   49     EP2_OUT_Callback,
//   50     EP3_OUT_Callback,
//   51     EP4_OUT_Callback,
//   52     EP5_OUT_Callback,
//   53     EP6_OUT_Callback,
//   54     EP7_OUT_Callback,
//   55   };
//   56 
//   57 
//   58 /*******************************************************************************
//   59 * Function Name  : USB_Istr
//   60 * Description    : ISTR events interrupt service routine
//   61 * Input          : None.
//   62 * Output         : None.
//   63 * Return         : None.
//   64 *******************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function USB_Istr
        THUMB
//   65 void USB_Istr(void)
//   66 {
//   67 
//   68   wIstr = _GetISTR();
USB_Istr:
        LDR.N    R0,??USB_Istr_0  ;; 0x40005c44
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR.N    R4,??USB_Istr_0+0x4  ;; wIstr
//   69 
//   70 #if (IMR_MSK & ISTR_RESET)
//   71   if (wIstr & ISTR_RESET & wInterrupt_Mask)
        LDR.N    R5,??USB_Istr_0+0x8  ;; wInterrupt_Mask
        LDR      R1,[R0, #+0]
        STRH     R1,[R4, #+0]
        LDRH     R1,[R4, #+0]
        LDRH     R2,[R5, #+0]
        ANDS     R2,R2,R1
        LSLS     R1,R2,#+21
        BPL.N    ??USB_Istr_1
//   72   {
//   73     _SetISTR((u16)CLR_RESET);
        LDR.N    R1,??USB_Istr_0+0xC  ;; 0xfbff
        STR      R1,[R0, #+0]
//   74     Device_Property.Reset();
        LDR.N    R0,??USB_Istr_0+0x10  ;; Device_Property + 4
        LDR      R0,[R0, #+0]
        BLX      R0
//   75 #ifdef RESET_CALLBACK
//   76     RESET_Callback();
//   77 #endif
//   78   }
//   79 #endif
//   80   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
//   81 #if (IMR_MSK & ISTR_DOVR)
//   82   if (wIstr & ISTR_DOVR & wInterrupt_Mask)
//   83   {
//   84     _SetISTR((u16)CLR_DOVR);
//   85 #ifdef DOVR_CALLBACK
//   86     DOVR_Callback();
//   87 #endif
//   88   }
//   89 #endif
//   90   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
//   91 #if (IMR_MSK & ISTR_ERR)
//   92   if (wIstr & ISTR_ERR & wInterrupt_Mask)
//   93   {
//   94     _SetISTR((u16)CLR_ERR);
//   95 #ifdef ERR_CALLBACK
//   96     ERR_Callback();
//   97 #endif
//   98   }
//   99 #endif
//  100   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
//  101 #if (IMR_MSK & ISTR_WKUP)
//  102   if (wIstr & ISTR_WKUP & wInterrupt_Mask)
//  103   {
//  104     _SetISTR((u16)CLR_WKUP);
//  105     Resume(RESUME_EXTERNAL);
//  106 #ifdef WKUP_CALLBACK
//  107     WKUP_Callback();
//  108 #endif
//  109   }
//  110 #endif
//  111   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
//  112 #if (IMR_MSK & ISTR_SUSP)
//  113   if (wIstr & ISTR_SUSP & wInterrupt_Mask)
//  114   {
//  115 
//  116     /* check if SUSPEND is possible */
//  117     if (fSuspendEnabled)
//  118     {
//  119       Suspend();
//  120     }
//  121     else
//  122     {
//  123       /* if not possible then resume after xx ms */
//  124       Resume(RESUME_LATER);
//  125     }
//  126     /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
//  127     _SetISTR((u16)CLR_SUSP);
//  128 #ifdef SUSP_CALLBACK
//  129     SUSP_Callback();
//  130 #endif
//  131   }
//  132 #endif
//  133   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
//  134 #if (IMR_MSK & ISTR_SOF)
//  135   if (wIstr & ISTR_SOF & wInterrupt_Mask)
//  136   {
//  137     _SetISTR((u16)CLR_SOF);
//  138     bIntPackSOF++;
//  139 
//  140 #ifdef SOF_CALLBACK
//  141     SOF_Callback();
//  142 #endif
//  143   }
//  144 #endif
//  145   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
//  146 #if (IMR_MSK & ISTR_ESOF)
//  147   if (wIstr & ISTR_ESOF & wInterrupt_Mask)
//  148   {
//  149     _SetISTR((u16)CLR_ESOF);
//  150     /* resume handling timing is made with ESOFs */
//  151     Resume(RESUME_ESOF); /* request without change of the machine state */
//  152 
//  153 #ifdef ESOF_CALLBACK
//  154     ESOF_Callback();
//  155 #endif
//  156   }
//  157 #endif
//  158   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
//  159 #if (IMR_MSK & ISTR_CTR)
//  160   if (wIstr & ISTR_CTR & wInterrupt_Mask)
??USB_Istr_1:
        LDRH     R0,[R4, #+0]
        LDRH     R1,[R5, #+0]
        ANDS     R1,R1,R0
        LSLS     R0,R1,#+16
        IT      MI 
//  161   {
//  162     /* servicing of the endpoint correct transfer interrupt */
//  163     /* clear of the CTR flag into the sub */
//  164     CTR_LP();
        _BLFMI   CTR_LP,??CTR_LP??rT
//  165 #ifdef CTR_CALLBACK
//  166     CTR_Callback();
//  167 #endif
//  168   }
//  169 #endif
//  170 } /* USB_Istr */
        POP      {R4,R5,PC}       ;; return
        DATA
??USB_Istr_0:
        DC32     0x40005c44
        DC32     wIstr
        DC32     wInterrupt_Mask
        DC32     0xfbff
        DC32     Device_Property + 4
        CFI EndBlock cfiBlock0

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        THUMB
??CTR_LP??rT:
        LDR.N    R3,??Subroutine0_0  ;; CTR_LP
        BX       R3
        DATA
??Subroutine0_0:
        DC32     CTR_LP
        CFI EndBlock cfiBlock1

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for pEpInt_IN>`:
        DATA
        DC32 EP1_IN_Callback, NOP_Process, NOP_Process, NOP_Process
        DC32 NOP_Process, NOP_Process, NOP_Process

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for pEpInt_OUT>`:
        DATA
        DC32 NOP_Process, EP2_OUT_Callback, NOP_Process, NOP_Process
        DC32 NOP_Process, NOP_Process, NOP_Process

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
//  171 
//  172 /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/
//  173 
// 
// 76 bytes in segment CODE
// 56 bytes in segment DATA_I
// 56 bytes in segment DATA_ID
//  3 bytes in segment DATA_Z
// 24 bytes in segment INITTAB
// 
// 68 bytes of CODE  memory (+ 32 bytes shared)
// 56 bytes of CONST memory
// 59 bytes of DATA  memory
//
//Errors: none
//Warnings: none
